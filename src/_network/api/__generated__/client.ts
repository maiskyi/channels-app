/* eslint-disable no-redeclare */
/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Channels
 * OpenAPI spec version: 1.0.0
 */
import { useCallback } from 'react';

import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';

import { useCustomInstance } from '../hooks/useCustomInstance/index';

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  ChannelsSearchParams,
  GetChannelResponse,
  GetChannelsParams,
  GetChannelsResponse,
  GetSearchChannelsResponse,
  SetChatMenuButtonRequest,
  SetMyCommandsRequest,
  SetMyNameRequest,
  Subscription,
} from './client.schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const useSetMyCommandsHook = () => {
  const setMyCommands = useCustomInstance<boolean>();

  return useCallback(
    (
      setMyCommandsRequest: SetMyCommandsRequest,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal
    ) => {
      return setMyCommands(
        {
          data: setMyCommandsRequest,
          headers: { 'Content-Type': 'application/json' },
          method: 'POST',
          signal,
          url: `/setMyCommands`,
        },
        options
      );
    },
    [setMyCommands]
  );
};

export const useSetMyCommandsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSetMyCommandsHook>>>,
    TError,
    { data: SetMyCommandsRequest },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSetMyCommandsHook>>>,
  TError,
  { data: SetMyCommandsRequest },
  TContext
> => {
  const mutationKey = ['setMyCommands'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const setMyCommands = useSetMyCommandsHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSetMyCommandsHook>>>,
    { data: SetMyCommandsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return setMyCommands(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetMyCommandsMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSetMyCommandsHook>>>
>;
export type SetMyCommandsMutationBody = SetMyCommandsRequest;
export type SetMyCommandsMutationError = unknown;

export const useSetMyCommands = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<ReturnType<typeof useSetMyCommandsHook>>>,
      TError,
      { data: SetMyCommandsRequest },
      TContext
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useSetMyCommandsHook>>>,
  TError,
  { data: SetMyCommandsRequest },
  TContext
> => {
  const mutationOptions = useSetMyCommandsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const useSetMyNameHook = () => {
  const setMyName = useCustomInstance<boolean>();

  return useCallback(
    (
      setMyNameRequest: SetMyNameRequest,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal
    ) => {
      return setMyName(
        {
          data: setMyNameRequest,
          headers: { 'Content-Type': 'application/json' },
          method: 'POST',
          signal,
          url: `/setMyName`,
        },
        options
      );
    },
    [setMyName]
  );
};

export const useSetMyNameMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSetMyNameHook>>>,
    TError,
    { data: SetMyNameRequest },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSetMyNameHook>>>,
  TError,
  { data: SetMyNameRequest },
  TContext
> => {
  const mutationKey = ['setMyName'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const setMyName = useSetMyNameHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSetMyNameHook>>>,
    { data: SetMyNameRequest }
  > = (props) => {
    const { data } = props ?? {};

    return setMyName(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetMyNameMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSetMyNameHook>>>
>;
export type SetMyNameMutationBody = SetMyNameRequest;
export type SetMyNameMutationError = unknown;

export const useSetMyName = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<ReturnType<typeof useSetMyNameHook>>>,
      TError,
      { data: SetMyNameRequest },
      TContext
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useSetMyNameHook>>>,
  TError,
  { data: SetMyNameRequest },
  TContext
> => {
  const mutationOptions = useSetMyNameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const useSetChatMenuButtonHook = () => {
  const setChatMenuButton = useCustomInstance<boolean>();

  return useCallback(
    (
      setChatMenuButtonRequest: SetChatMenuButtonRequest,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal
    ) => {
      return setChatMenuButton(
        {
          data: setChatMenuButtonRequest,
          headers: { 'Content-Type': 'application/json' },
          method: 'POST',
          signal,
          url: `/setChatMenuButton`,
        },
        options
      );
    },
    [setChatMenuButton]
  );
};

export const useSetChatMenuButtonMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSetChatMenuButtonHook>>>,
    TError,
    { data: SetChatMenuButtonRequest },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSetChatMenuButtonHook>>>,
  TError,
  { data: SetChatMenuButtonRequest },
  TContext
> => {
  const mutationKey = ['setChatMenuButton'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const setChatMenuButton = useSetChatMenuButtonHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSetChatMenuButtonHook>>>,
    { data: SetChatMenuButtonRequest }
  > = (props) => {
    const { data } = props ?? {};

    return setChatMenuButton(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetChatMenuButtonMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSetChatMenuButtonHook>>>
>;
export type SetChatMenuButtonMutationBody = SetChatMenuButtonRequest;
export type SetChatMenuButtonMutationError = unknown;

export const useSetChatMenuButton = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<ReturnType<typeof useSetChatMenuButtonHook>>>,
      TError,
      { data: SetChatMenuButtonRequest },
      TContext
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useSetChatMenuButtonHook>>>,
  TError,
  { data: SetChatMenuButtonRequest },
  TContext
> => {
  const mutationOptions = useSetChatMenuButtonMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const useGetChannelsHook = () => {
  const getChannels = useCustomInstance<GetChannelsResponse>();

  return useCallback(
    (
      params?: GetChannelsParams,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal
    ) => {
      return getChannels(
        { method: 'GET', params, signal, url: `/api/channels` },
        options
      );
    },
    [getChannels]
  );
};

export const getGetChannelsQueryKey = (params?: GetChannelsParams) => {
  return [`/api/channels`, ...(params ? [params] : [])] as const;
};

export const useGetChannelsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    GetChannelsParams['skip']
  >,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData,
        QueryKey,
        GetChannelsParams['skip']
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelsQueryKey(params);

  const getChannels = useGetChannelsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    QueryKey,
    GetChannelsParams['skip']
  > = ({ signal, pageParam }) =>
    getChannels(
      { ...params, skip: pageParam || params?.['skip'] },
      requestOptions,
      signal
    );

  return {
    cacheTime: 0,
    queryFn,
    queryKey,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as unknown as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    TError,
    TData,
    QueryKey,
    GetChannelsParams['skip']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChannelsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>
>;
export type GetChannelsInfiniteQueryError = unknown;

export function useGetChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    GetChannelsParams['skip']
  >,
  TError = unknown,
>(
  params: undefined | GetChannelsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData,
        QueryKey,
        GetChannelsParams['skip']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    GetChannelsParams['skip']
  >,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData,
        QueryKey,
        GetChannelsParams['skip']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    GetChannelsParams['skip']
  >,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData,
        QueryKey,
        GetChannelsParams['skip']
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    GetChannelsParams['skip']
  >,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData,
        QueryKey,
        GetChannelsParams['skip']
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetChannelsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetChannelsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelsQueryKey(params);

  const getChannels = useGetChannelsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>
  > = ({ signal }) => getChannels(params, requestOptions, signal);

  return {
    cacheTime: 0,
    queryFn,
    queryKey,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as unknown as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChannelsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>
>;
export type GetChannelsQueryError = unknown;

export function useGetChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
  TError = unknown,
>(
  params: undefined | GetChannelsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetChannelsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetChannelHook = () => {
  const getChannel = useCustomInstance<GetChannelResponse>();

  return useCallback(
    (
      username: string,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal
    ) => {
      return getChannel(
        { method: 'GET', signal, url: `/api/channels/${username}` },
        options
      );
    },
    [getChannel]
  );
};

export const getGetChannelQueryKey = (username: string) => {
  return [`/api/channels/${username}`] as const;
};

export const useGetChannelInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  >,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelQueryKey(username);

  const getChannel = useGetChannelHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  > = ({ signal }) => getChannel(username, requestOptions, signal);

  return {
    cacheTime: 0,
    enabled: !!username,
    queryFn,
    queryKey,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as unknown as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChannelInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
>;
export type GetChannelInfiniteQueryError = unknown;

export function useGetChannelInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  >,
  TError = unknown,
>(
  username: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannelInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  >,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannelInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  >,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetChannelInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  >,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetChannelInfiniteQueryOptions(username, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetChannelQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelQueryKey(username);

  const getChannel = useGetChannelHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  > = ({ signal }) => getChannel(username, requestOptions, signal);

  return {
    cacheTime: 0,
    enabled: !!username,
    queryFn,
    queryKey,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as unknown as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChannelQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
>;
export type GetChannelQueryError = unknown;

export function useGetChannel<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
  TError = unknown,
>(
  username: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannel<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannel<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetChannel<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetChannelQueryOptions(username, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useSubscribeToChannelHook = () => {
  const subscribeToChannel = useCustomInstance<Subscription>();

  return useCallback(
    (
      username: string,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal
    ) => {
      return subscribeToChannel(
        { method: 'POST', signal, url: `/api/channels/${username}/subscribe` },
        options
      );
    },
    [subscribeToChannel]
  );
};

export const useSubscribeToChannelMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSubscribeToChannelHook>>>,
    TError,
    { username: string },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSubscribeToChannelHook>>>,
  TError,
  { username: string },
  TContext
> => {
  const mutationKey = ['subscribeToChannel'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const subscribeToChannel = useSubscribeToChannelHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSubscribeToChannelHook>>>,
    { username: string }
  > = (props) => {
    const { username } = props ?? {};

    return subscribeToChannel(username, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubscribeToChannelMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSubscribeToChannelHook>>>
>;

export type SubscribeToChannelMutationError = unknown;

export const useSubscribeToChannel = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<ReturnType<typeof useSubscribeToChannelHook>>>,
      TError,
      { username: string },
      TContext
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useSubscribeToChannelHook>>>,
  TError,
  { username: string },
  TContext
> => {
  const mutationOptions = useSubscribeToChannelMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const useUnsubscribeFromChannelHook = () => {
  const unsubscribeFromChannel = useCustomInstance<Subscription>();

  return useCallback(
    (
      username: string,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal
    ) => {
      return unsubscribeFromChannel(
        {
          method: 'POST',
          signal,
          url: `/api/channels/${username}/unsubscribe`,
        },
        options
      );
    },
    [unsubscribeFromChannel]
  );
};

export const useUnsubscribeFromChannelMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUnsubscribeFromChannelHook>>>,
    TError,
    { username: string },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useUnsubscribeFromChannelHook>>>,
  TError,
  { username: string },
  TContext
> => {
  const mutationKey = ['unsubscribeFromChannel'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const unsubscribeFromChannel = useUnsubscribeFromChannelHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useUnsubscribeFromChannelHook>>>,
    { username: string }
  > = (props) => {
    const { username } = props ?? {};

    return unsubscribeFromChannel(username, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UnsubscribeFromChannelMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useUnsubscribeFromChannelHook>>>
>;

export type UnsubscribeFromChannelMutationError = unknown;

export const useUnsubscribeFromChannel = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<ReturnType<typeof useUnsubscribeFromChannelHook>>>,
      TError,
      { username: string },
      TContext
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useUnsubscribeFromChannelHook>>>,
  TError,
  { username: string },
  TContext
> => {
  const mutationOptions = useUnsubscribeFromChannelMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const useChannelsSearchHook = () => {
  const channelsSearch = useCustomInstance<GetSearchChannelsResponse>();

  return useCallback(
    (
      params: ChannelsSearchParams,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal
    ) => {
      return channelsSearch(
        { method: 'GET', params, signal, url: `/api/search/channels` },
        options
      );
    },
    [channelsSearch]
  );
};

export const getChannelsSearchQueryKey = (params: ChannelsSearchParams) => {
  return [`/api/search/channels`, ...(params ? [params] : [])] as const;
};

export const useChannelsSearchInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    ChannelsSearchParams['skip']
  >,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData,
        QueryKey,
        ChannelsSearchParams['skip']
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getChannelsSearchQueryKey(params);

  const channelsSearch = useChannelsSearchHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    QueryKey,
    ChannelsSearchParams['skip']
  > = ({ signal, pageParam }) =>
    channelsSearch(
      { ...params, skip: pageParam || params?.['skip'] },
      requestOptions,
      signal
    );

  return {
    cacheTime: 0,
    queryFn,
    queryKey,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as unknown as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    TError,
    TData,
    QueryKey,
    ChannelsSearchParams['skip']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ChannelsSearchInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>
>;
export type ChannelsSearchInfiniteQueryError = unknown;

export function useChannelsSearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    ChannelsSearchParams['skip']
  >,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData,
        QueryKey,
        ChannelsSearchParams['skip']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useChannelsSearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    ChannelsSearchParams['skip']
  >,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData,
        QueryKey,
        ChannelsSearchParams['skip']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useChannelsSearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    ChannelsSearchParams['skip']
  >,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData,
        QueryKey,
        ChannelsSearchParams['skip']
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useChannelsSearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    ChannelsSearchParams['skip']
  >,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData,
        QueryKey,
        ChannelsSearchParams['skip']
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useChannelsSearchInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useChannelsSearchQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getChannelsSearchQueryKey(params);

  const channelsSearch = useChannelsSearchHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>
  > = ({ signal }) => channelsSearch(params, requestOptions, signal);

  return {
    cacheTime: 0,
    queryFn,
    queryKey,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as unknown as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ChannelsSearchQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>
>;
export type ChannelsSearchQueryError = unknown;

export function useChannelsSearch<
  TData = Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useChannelsSearch<
  TData = Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useChannelsSearch<
  TData = Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useChannelsSearch<
  TData = Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useChannelsSearchQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

// @ts-nocheck

/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Channels
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { useCallback } from "react";

import type {
  ChannelsSearchParams,
  GetChannelResponse,
  GetChannelsParams,
  GetChannelsResponse,
  GetSearchChannelsResponse,
} from "./client.schemas";

import { useCustomInstance } from "../hooks/useCustomInstance/index";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const useGetChannelsHook = () => {
  const getChannels = useCustomInstance<GetChannelsResponse>();

  return useCallback(
    (
      params?: GetChannelsParams,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal,
    ) => {
      return getChannels(
        { url: `/api/channels`, method: "GET", params, signal },
        options,
      );
    },
    [getChannels],
  );
};

export const getGetChannelsQueryKey = (params?: GetChannelsParams) => {
  return [`/api/channels`, ...(params ? [params] : [])] as const;
};

export const useGetChannelsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    GetChannelsParams["skip"]
  >,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData,
        QueryKey,
        GetChannelsParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelsQueryKey(params);

  const getChannels = useGetChannelsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    QueryKey,
    GetChannelsParams["skip"]
  > = ({ signal, pageParam }) =>
    getChannels(
      { ...params, skip: pageParam || params?.["skip"] },
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    TError,
    TData,
    QueryKey,
    GetChannelsParams["skip"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChannelsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>
>;
export type GetChannelsInfiniteQueryError = unknown;

export function useGetChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    GetChannelsParams["skip"]
  >,
  TError = unknown,
>(
  params: undefined | GetChannelsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData,
        QueryKey,
        GetChannelsParams["skip"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    GetChannelsParams["skip"]
  >,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData,
        QueryKey,
        GetChannelsParams["skip"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    GetChannelsParams["skip"]
  >,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData,
        QueryKey,
        GetChannelsParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    GetChannelsParams["skip"]
  >,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData,
        QueryKey,
        GetChannelsParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetChannelsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetChannelsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelsQueryKey(params);

  const getChannels = useGetChannelsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>
  > = ({ signal }) => getChannels(params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChannelsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>
>;
export type GetChannelsQueryError = unknown;

export function useGetChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
  TError = unknown,
>(
  params: undefined | GetChannelsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
  TError = unknown,
>(
  params?: GetChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetChannelsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetChannelHook = () => {
  const getChannel = useCustomInstance<GetChannelResponse>();

  return useCallback(
    (
      username: string,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal,
    ) => {
      return getChannel(
        { url: `/api/channels/${username}`, method: "GET", signal },
        options,
      );
    },
    [getChannel],
  );
};

export const getGetChannelQueryKey = (username: string) => {
  return [`/api/channels/${username}`] as const;
};

export const useGetChannelInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  >,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelQueryKey(username);

  const getChannel = useGetChannelHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  > = ({ signal }) => getChannel(username, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChannelInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
>;
export type GetChannelInfiniteQueryError = unknown;

export function useGetChannelInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  >,
  TError = unknown,
>(
  username: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannelInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  >,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannelInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  >,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetChannelInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  >,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetChannelInfiniteQueryOptions(username, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetChannelQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelQueryKey(username);

  const getChannel = useGetChannelHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
  > = ({ signal }) => getChannel(username, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChannelQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
>;
export type GetChannelQueryError = unknown;

export function useGetChannel<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
  TError = unknown,
>(
  username: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannel<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChannel<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetChannel<
  TData = Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
  TError = unknown,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetChannelHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetChannelQueryOptions(username, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useChannelsSearchHook = () => {
  const channelsSearch = useCustomInstance<GetSearchChannelsResponse>();

  return useCallback(
    (
      params: ChannelsSearchParams,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal,
    ) => {
      return channelsSearch(
        { url: `/api/search/channels`, method: "GET", params, signal },
        options,
      );
    },
    [channelsSearch],
  );
};

export const getChannelsSearchQueryKey = (params: ChannelsSearchParams) => {
  return [`/api/search/channels`, ...(params ? [params] : [])] as const;
};

export const useChannelsSearchInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    ChannelsSearchParams["skip"]
  >,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData,
        QueryKey,
        ChannelsSearchParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getChannelsSearchQueryKey(params);

  const channelsSearch = useChannelsSearchHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    QueryKey,
    ChannelsSearchParams["skip"]
  > = ({ signal, pageParam }) =>
    channelsSearch(
      { ...params, skip: pageParam || params?.["skip"] },
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    TError,
    TData,
    QueryKey,
    ChannelsSearchParams["skip"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ChannelsSearchInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>
>;
export type ChannelsSearchInfiniteQueryError = unknown;

export function useChannelsSearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    ChannelsSearchParams["skip"]
  >,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData,
        QueryKey,
        ChannelsSearchParams["skip"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useChannelsSearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    ChannelsSearchParams["skip"]
  >,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData,
        QueryKey,
        ChannelsSearchParams["skip"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useChannelsSearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    ChannelsSearchParams["skip"]
  >,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData,
        QueryKey,
        ChannelsSearchParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useChannelsSearchInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    ChannelsSearchParams["skip"]
  >,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData,
        QueryKey,
        ChannelsSearchParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useChannelsSearchInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useChannelsSearchQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getChannelsSearchQueryKey(params);

  const channelsSearch = useChannelsSearchHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>
  > = ({ signal }) => channelsSearch(params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ChannelsSearchQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>
>;
export type ChannelsSearchQueryError = unknown;

export function useChannelsSearch<
  TData = Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useChannelsSearch<
  TData = Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>
        >,
        "initialData"
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useChannelsSearch<
  TData = Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useChannelsSearch<
  TData = Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
  TError = unknown,
>(
  params: ChannelsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useChannelsSearchHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useChannelsSearchQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

// @ts-nocheck

/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Channels
 * OpenAPI spec version: 1.0.0
 */
import { useCallback } from 'react';

import { useInfiniteQuery, useQuery } from '@tanstack/react-query';

import { useCustomInstance } from '../hooks/useCustomInstance/index';

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  GetSearchChannelsParams,
  GetSearchChannelsResponse,
} from './client.schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const useGetSearchChannelsHook = () => {
  const getSearchChannels = useCustomInstance<GetSearchChannelsResponse>();

  return useCallback(
    (
      params: GetSearchChannelsParams,
      options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
      signal?: AbortSignal
    ) => {
      return getSearchChannels(
        { method: 'GET', params, signal, url: `/api/search/channels` },
        options
      );
    },
    [getSearchChannels]
  );
};

export const getGetSearchChannelsQueryKey = (
  params: GetSearchChannelsParams
) => {
  return [`/api/search/channels`, ...(params ? [params] : [])] as const;
};

export const useGetSearchChannelsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
    GetSearchChannelsParams['skip']
  >,
  TError = unknown,
>(
  params: GetSearchChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        QueryKey,
        GetSearchChannelsParams['skip']
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSearchChannelsQueryKey(params);

  const getSearchChannels = useGetSearchChannelsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
    QueryKey,
    GetSearchChannelsParams['skip']
  > = ({ signal, pageParam }) =>
    getSearchChannels(
      { ...params, skip: pageParam || params?.['skip'] },
      requestOptions,
      signal
    );

  return {
    cacheTime: 0,
    queryFn,
    queryKey,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
    TError,
    TData,
    Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
    QueryKey,
    GetSearchChannelsParams['skip']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSearchChannelsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>
>;
export type GetSearchChannelsInfiniteQueryError = unknown;

export function useGetSearchChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
    GetSearchChannelsParams['skip']
  >,
  TError = unknown,
>(
  params: GetSearchChannelsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        QueryKey,
        GetSearchChannelsParams['skip']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSearchChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
    GetSearchChannelsParams['skip']
  >,
  TError = unknown,
>(
  params: GetSearchChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        QueryKey,
        GetSearchChannelsParams['skip']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSearchChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
    GetSearchChannelsParams['skip']
  >,
  TError = unknown,
>(
  params: GetSearchChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        QueryKey,
        GetSearchChannelsParams['skip']
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetSearchChannelsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
    GetSearchChannelsParams['skip']
  >,
  TError = unknown,
>(
  params: GetSearchChannelsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        QueryKey,
        GetSearchChannelsParams['skip']
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetSearchChannelsInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetSearchChannelsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
  TError = unknown,
>(
  params: GetSearchChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSearchChannelsQueryKey(params);

  const getSearchChannels = useGetSearchChannelsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>
  > = ({ signal }) => getSearchChannels(params, requestOptions, signal);

  return {
    cacheTime: 0,
    queryFn,
    queryKey,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSearchChannelsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>
>;
export type GetSearchChannelsQueryError = unknown;

export function useGetSearchChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
  TError = unknown,
>(
  params: GetSearchChannelsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSearchChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
  TError = unknown,
>(
  params: GetSearchChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
          TError,
          Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSearchChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
  TError = unknown,
>(
  params: GetSearchChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetSearchChannels<
  TData = Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
  TError = unknown,
>(
  params: GetSearchChannelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetSearchChannelsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetSearchChannelsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
